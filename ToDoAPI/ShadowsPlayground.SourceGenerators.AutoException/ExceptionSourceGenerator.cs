using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ShadowsPlayground.SourceGenerators.AutoException;

[Generator]
internal class ExceptionSourceGenerator : ISourceGenerator
{
	public void Initialize(GeneratorInitializationContext context)
	{
		context.RegisterForPostInitialization(PostInitializationCallback);
		context.RegisterForSyntaxNotifications(SyntaxNotificationCallback);
	}

	public void Execute(GeneratorExecutionContext context)
	{
		var syntaxContextReceiver = (ExceptionSyntaxContextReceiver)context.SyntaxContextReceiver!;
		var sourceBuilder = new StringBuilder();

		foreach (var candidate in syntaxContextReceiver.Candidates)
		{
			sourceBuilder.AppendLine("// </auto-generated>");
			sourceBuilder.AppendLine("#nullable enable");
			sourceBuilder.AppendLine();
			sourceBuilder.AppendLine($"namespace {candidate.ContainingNamespace.ToDisplayString()};");
			sourceBuilder.AppendLine();
			sourceBuilder.AppendLine(
				$"{AccessModifierHelper.GetAccessModifierString(candidate.DeclaredAccessibility)} partial class {candidate.Name} : global::System.Exception");
			sourceBuilder.AppendLine("{");
			sourceBuilder.AppendLine(
				$"\tpublic {candidate.Name}() : base()");
			sourceBuilder.AppendLine("\t{");
			sourceBuilder.AppendLine("\t}");
			sourceBuilder.AppendLine(
				$"\tpublic {candidate.Name}(string? message) : base(message)");
			sourceBuilder.AppendLine("\t{");
			sourceBuilder.AppendLine("\t}");
			sourceBuilder.AppendLine(
				$"\tpublic {candidate.Name}(string? message, global::System.Exception? innerException) : base(message, innerException)");
			sourceBuilder.AppendLine("\t{");
			sourceBuilder.AppendLine("\t}");
			sourceBuilder.AppendLine("}");
			context.AddSource($"{candidate.Name}.g.cs", sourceBuilder.ToString());
			sourceBuilder.Clear();
		}
	}

	private static void PostInitializationCallback(GeneratorPostInitializationContext context)
	{
		context.AddSource("AutoExceptionAttribute.g.cs", $@"// <auto-generated />
#nullable enable

namespace {Constants.DefaultNs};

[global::System.AttributeUsageAttribute(validOn: global::System.AttributeTargets.Class, AllowMultiple = false)]
public sealed class {Constants.AutoExceptionAttributeName} : global::System.Attribute;");
	}

	private static ISyntaxContextReceiver SyntaxNotificationCallback()
	{
		return new ExceptionSyntaxContextReceiver();
	}
}

file class ExceptionSyntaxContextReceiver : ISyntaxContextReceiver
{
	public List<ITypeSymbol> Candidates { get; } = new();

	public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
	{
		if (context.Node is not ClassDeclarationSyntax cds ||
		    context.SemanticModel.GetDeclaredSymbol(cds) is not ITypeSymbol typeSymbol)

		{
			return;
		}

		var attributes = typeSymbol.GetAttributes();

		if (attributes.Any(ad =>
			    ad.AttributeClass?.Name is Constants.AutoExceptionAttributeName &&
			    ad.AttributeClass?.ContainingNamespace.Name is Constants.DefaultNs))
		{
			Candidates.Add(typeSymbol);
		}
	}
}